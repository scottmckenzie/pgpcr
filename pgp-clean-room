#!/usr/bin/python3

from snack import *
import subprocess
import tempfile
import shutil
import gettext
from pgpcr import gpg_newt as gpg_ui, disks_newt as disks
from pgpcr import common_newt as common_ui, smartcard_newt as smartcard_ui

screen = SnackScreen()
lang = ListboxChoiceWindow(screen, "Language", "Choose your language",
                           [("English", "en")], buttons=["Ok"])

gettext.install("pgpcr", codeset=lang[1])

running = True
while running:
    screen = SnackScreen()
    ret = ButtonChoiceWindow(screen, _("Welcome to the PGP Clean Room!"),
                             _("What do you wish to do?"),
                             [(_("New GPG Key"), "new gpg"),
                              (_("Load GPG Key"), "load gpg"),
                              (_("Advanced"), "adv")
                             ])

    workdir = tempfile.TemporaryDirectory(prefix="pgpcr")
    if ret is not None and ret.endswith("gpg"):
        shutil.copyfile("/etc/pgpcr/gpg.conf", workdir.name+"/gpg.conf")
        shutil.copyfile("/etc/pgpcr/gpg-agent.conf", workdir.name+"/gpg-agent.conf")
        subprocess.run(["gpgconf", "--kill", "gpg-agent"])
    if ret == "new gpg":
        gpg_ui.new(screen, workdir)
    elif ret == "load gpg":
        gpg_ui.load(screen, workdir)
    elif ret == "adv":
        adv = ListboxChoiceWindow(screen, _("Advanced options"),
                                  _("These options are for users who know what they are doing"),
                                  [(_("Generate Key on Smartcard"), "gen"),
                                   (_("Import existing key"), "import"),
                                   (_("Run shell"), "shell")
                                  ])
        if adv[0] == "cancel":
            continue
        if adv[1] == "gen":
            smartcard_ui.generate(screen, workdir)
        elif adv[1] == "import":
            gpg_ui.importkey(screen, workdir)
        elif adv[1] == "shell":
            screen.finish()
            subprocess.run(["bash", "-l"])
    elif ret == "quit":
        ret = common_ui.dangerConfirm(screen, _("PGP Clean Room"),
                                      _("Would you like to shutdown the PGP Clean Room?"))
        if ret:
            running = False
    workdir.cleanup()

screen.finish()
subprocess.run(["sudo", "shutdown", "now"])
