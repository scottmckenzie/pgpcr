#!/usr/bin/python3

from snack import *
import subprocess
import shutil
import gettext
import sys
import traceback
import os
import logging
import shutil
import tempfile
from pgpcr import gpg_newt as gpg_ui, disks_newt as disks
from pgpcr import common_newt as common_ui, smartcard_newt as smartcard_ui
from pgpcr import pki_newt as pki_ui
from pgpcr.context import defaulthome, setupworkdir

subprocess.run(["setfont", "/usr/share/consolefonts/Unifont-APL8x16.psf.gz"])

def excepthook(t, v, tb):
    SnackScreen().finish()
    log.exceptiion("ERROR")
    traceback.print_exception(t, v, tb)

sys.excepthook = excepthook

screen = SnackScreen()
lang = common_ui.listmenu(screen, "Language", "Choose your language",
                [("English", "en")])

os.environ["LANGUAGE"] = lang

tran = gettext.translation("pgpcr", "/usr/share/locale/", [lang],
        fallback=True)
tran.install()
if type(tran) is gettext.NullTranslations and lang != "en":
    common_ui.error(screen, "Translation for "+lang+" not found! Falling"
            "back to English")

with open("/var/log/live/boot.log") as f:
    r = f.read()
    if "Warning: Not enough free memory" not in r:
        common_ui.alert(screen, _("Boot Media"), _("You can now remove the"
        " boot media, as the entire filesystem has been loaded into RAM."))

log = logging.getLogger("pgpcr")
log.setLevel(logging.INFO)
fh = logging.FileHandler(os.environ["HOME"]+"/pgpcr.log")
fh.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s:%(levelname)s:%(name)s:%(message)s")
fh.setFormatter(formatter)
log.addHandler(fh)

log.info(" LANGUAGE: "+lang)
log.info(" GPGME_DEBUG: "+os.getenv("GPGME_DEBUG", "NOT SET"))
log.info(" GPG_TTY: "+os.getenv("GPG_TTY", "NOT SET"))

running = True
while running:
    screen = common_ui.Screen()
    ret = common_ui.listmenu(screen, _("Welcome to the PGP Clean Room!"),
                             _("What do you wish to do?"),
                             [(_("Generate a New GPG Master Key"), "new gpg"),
                              (_("Load a GPG Master Key from USB"), "load gpg"),
                              (_("Advanced Options"), "adv"),
                              (_("New CA"), "newca"),
                              (_("Quit"), "quit")
                             ])

    workdir = defaulthome
    if not os.path.exists(workdir):
        os.mkdir(workdir)
    if workdir != defaulthome:
        socketdir = "/run/user/"+str(os.getuid())
        subprocess.run(["sudo", "mkdir", "-p", socketdir])
        subprocess.run(["sudo", "chown", str(os.getuid()), socketdir])
    setupworkdir(workdir)
    if ret == "new gpg":
        gpg_ui.new(screen, workdir)
    elif ret == "load gpg":
        gpg_ui.load(screen, workdir)
    elif ret == "newca":
        tmp = tempfile.TemporaryDirectory()
        workdir = tmp.name
        pki_ui.new(workdir)
    elif ret == "adv":
        adv = common_ui.LCW(screen, _("Advanced Options"),
                                  _("These options are for users who know what"
                                  " they are doing"),
                                  [(_("Generate Key on Smartcard"), "gen"),
                                   (_("Import existing key"), "import"),
                                   (_("Set Smartcard properties"), "setsmart"),
                                   (_("Set Smartcard PINs"), "setpins"),
                                   (_("Run shell"), "shell"),
                                  ])
        if adv[0] == "cancel":
            continue
        if adv[1] == "gen":
            smartcard_ui.generate(screen, workdir)
        elif adv[1] == "import":
            gpg_ui.importkey(screen, workdir)
        elif adv[1] == "setsmart":
            smart = smartcard_ui.pickcard(screen, workdir)
            smartcard_ui.setproperties(screen, smart)
        elif adv[1] == "setpins":
            smart = smartcard_ui.pickcard(screen, workdir)
            smartcard_ui.setpins(screen, smart)
        elif adv[1] == "shell":
            screen.finish()
            subprocess.run(["bash", "-l"])
    elif ret == "quit":
        ret = common_ui.dangerConfirm(screen, _("PGP Clean Room"),
                                      _("Would you like to shutdown the PGP Clean Room?"))
        if ret:
            running = False
    shutil.rmtree(workdir)

screen.finish()
subprocess.run(["sudo", "shutdown", "now"])
